import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:firebase_core/firebase_core.dart';

import 'firebase_options.dart'; // Auto-generated by FlutterFire CLI

// Import theme settings
import 'src/utils/theme/theme.dart';

// Import authentication-related screens
import 'src/features/authentication/screens/welcome/welcome_screen.dart';
import 'src/features/authentication/screens/login/login_screen.dart';
import 'src/features/authentication/screens/signup/signup_screen.dart';
import 'src/features/authentication/screens/dashboard/dashboard.dart';

// Import theme controller for dynamic theme switching
import 'src/utils/theme/theme_controller.dart';

// Import profile image controller for managing user images
import 'src/features/authentication/controllers/profile_image_controller.dart';

// Global navigator key for managing navigation state
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

void main() async {
  // Ensure Flutter binding is initialized before running the app
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase with platform-specific options
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Register GetX controllers for global access
  Get.put(ThemeController()); // Handles theme switching
  Get.put(ProfileImageController()); // Manages profile image logic

  // Run the main application
  runApp(const App());
}

// Main application widget
class App extends StatelessWidget {
  const App({super.key});

  @override
  Widget build(BuildContext context) {
    final themeController =
        ThemeController.to; // Retrieve theme controller instance

    return Obx(
      () => GetMaterialApp(
        navigatorKey:
            navigatorKey, // Use global navigator key for navigation control
        title: 'ISL Kids App', // App title
        debugShowCheckedModeBanner: false, // Hide debug banner
        theme: TAppTheme.lightTheme, // Define light theme
        darkTheme: TAppTheme.darkTheme, // Define dark theme
        themeMode: themeController.themeMode, // Apply user-selected theme mode
        initialRoute: '/welcome', // Set initial screen route
        getPages: [
          GetPage(
            name: '/welcome',
            page: () => const WelcomeScreen(),
          ), // Welcome screen route
          GetPage(
            name: '/login',
            page: () => const LoginScreen(),
          ), // Login screen route
          GetPage(
            name: '/signup',
            page: () => const SignUpScreen(),
          ), // Signup screen route
          GetPage(
            name: '/dashboard',
            page: () => const Dashboard(),
          ), // Dashboard route
        ],
      ),
    );
  }
}
